#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Wed Aug 22 11:08:22 2018

This function helps with any IO calculations

@author: earao
"""
import numpy as np
from itertools import permutations
import math

def make_Z_from_S_U(S,U):
    
    Z = np.zeros(shape = (np.size(S,0)+np.size(U,0),np.size(S,1)+np.size(U,1)))
    
    Z[np.size(S,0):,0:np.size(U,1)] = U
    Z[0:np.size(S,0),np.size(U,1):] = S
        
    return Z


def make_x(Z,Y):
    
    x = np.sum(Z,1)+np.sum(Y,1)
    x[x == 0] = 0.000000001
    
    return x


def make_L(Z,x):
    
    bigX = np.zeros(shape = (len(Z)))    
    bigX = np.tile(np.transpose(x),(len(Z),1))
    A = np.divide(Z,bigX)    
    L = np.linalg.inv(np.identity(len(Z))-A)

    return L


def prod_mult(e,L,Yprop):
    
    e_prod_mult = np.zeros(shape = 106)
    eL = np.dot(e,L)
    eLY = np.multiply(eL,Yprop)
    for r in range(10,20):
        e_prod_mult = e_prod_mult + eLY[r*106:(r+1)*106]
            
    return e_prod_mult 


def ras(true_row_sum,true_col_sum,to_balance):
    
    temp = to_balance   
        
    for _ in range(0, 500):
        col_sum_now = np.zeros(shape = (1,len(true_col_sum)))
        col_sum_now = np.sum(temp,0);
        col_sum_now[col_sum_now<=0] = 1
            
        for row in range(0, len(true_row_sum)):
            temp[row,:] = np.multiply(np.divide(temp[row,:], col_sum_now), true_col_sum);
                
        row_sum_now = np.sum(temp,1);
        row_sum_now[row_sum_now<=0] = 1
            
        for col in range(0, len(true_col_sum)):
            temp[:,col] = np.multiply(np.divide(temp[:,col], row_sum_now), true_row_sum);
                
    balanced = temp
    
    return(balanced)

    
def sda(sda_0,sda_1):
    
    terms = len(sda_0)
    template = np.zeros(shape = [math.factorial(terms),terms,terms])
    solutionmatrix = np.zeros(shape = [terms,terms])
    result = np.zeros(shape=[len(template)+5,terms+1])
    temp = {}
    combs_items = np.zeros(shape=terms)
    
    for a in range(0,terms):
        solutionmatrix[a,a] = 2
    
    for a in range(0,terms):
        for b in range(0,terms):
            if solutionmatrix[a,b]==2:
                solutionmatrix[a,b+1:terms] = 1

    for a in range(0,terms):
        combs_items[a] = a    
    
    combs = np.array(list(set(permutations(combs_items))))          
        
    for a in range(0,terms):        
        for b in range(0,math.factorial(terms)):
            for c in range(0,terms):
                
                if a==c:                    
                    template[b,c,a] = 2
                    
                else:                   
                    for d in range(0,terms):                        
                        for e in range(0,terms):                            
                            if combs[b,d] == a:                                
                                if combs[b,e] == c:                                    
                                    template[b,c,a]=solutionmatrix[d,e]
        
    for a in range(0,terms):     
        for b  in range(0,len(template)):            
            for c in range(0,terms):
                
                if template[b,c,a] == 2:                    
                    temp[c] = sda_0[c]-sda_1[c]
                    
                elif template[b,c,a] == 1:                    
                    temp[c] = sda_0[c]
                    
                elif template[b,c,a] == 0:                    
                    temp[c] = sda_1[c]            
            
            tempresults = 1
            
            for c in range(0,terms):                
               tempresults = np.dot(tempresults,temp[c])
            
            result[b,a+1] = tempresults
                         
    for a in range(0,len(template)):        
        result[a,0] = np.sum(result[a,1:terms+1])
    
    for a in range(0,terms):
        
        result[len(template)+0,a+1]=np.mean(result[0:len(template),a+1])
        result[len(template)+1,a+1]=np.max(result[0:len(template),a+1])
        result[len(template)+2,a+1]=np.min(result[0:len(template),a+1])
        result[len(template)+3,a+1]=np.std(result[0:len(template),a+1])
        result[len(template)+4,a+1]=result[len(template),a+1]/result[0,0]
    
    return result

def sun_sda(sda_0,sda_1):
    
    terms = len(sda_0)
    x=1 
    lasttemp = 1 
    resulttemp = 0 
    temp=0
    
    result = np.zeros(shape[terms])
    
    for a in range(0,terms):        
        x = x*sda_0[a]

    count = 1
    for a in range(0,terms):     
        for b in range(0,terms):     
            for c in range(0,terms):     
                if b==a and c==0 and a==0:               
                    two[a,count]=[b,c]
                    count = count + 1;                                              
            count = 1

    if terms>3:
        count = 1
        for a in range(0,terms):    
            for b in range(0,terms):    
                for c in range(0,terms):    
                    for d in range(0,terms):    
                        if b==a and c==a==0 and d==a==0 and d==c==0 and d>c:
                            three[a,count]=[b,c,d]
                            count = count + 1
            count = 1

    if terms>4:
        count = 1
        for a in range(0,terms):
            for b in range(0,terms):
                for c in range(0,terms):
                    for d in range(0,terms):
                        for e in range(0,terms):
                            if b==a and c==a==0 and d==a==0 and d==c==0 and d>c and e==a==0 and e==c==0 and e==d==0 and e>d:
                                four[a,count]=[b,c,d,e]
                                count = count + 1
                        
            count = 1

    if terms>5:
        count = 1
        for a in range(0,terms):
            for b in range(0,terms):
                for c in range(0,terms):
                    for d in range(0,terms):
                        for e in range(0,terms):
                            for f in range(0,terms):
                                if b==a and c==a==0 and d==a==0 and d==c==0 and d>c and e==a==0 and e==c==0 and e==d==0 and e>d and f==a==0 and f==c==0 and f==d==0 and f==e==0 and f>e:
                                    five[a,count]=[b,c,d,e,f]
                                    count = count + 1
            count = 1
 
    if terms>6:
        count = 1
        for a in range(0,terms):
            for b in range(0,terms):
                for c in range(0,terms):
                    for d in range(0,terms):
                        for e in range(0,terms):
                            for f in range(0,terms):
                                for g in range(0,terms):
                                    if b==a and c==a==0 and d==a==0 and d==c==0 and d>c and e==a==0 and e==c==0 and e==d==0 and e>d and f==a==0 and f==c==0 and f==d==0 and f==e==0 and f>e and g==a==0 and g==c==0 and g==d==0 and g==e==0 and g==f==0 and g>f:
                                        six[a,count]=[b,c,d,e,f,g]
                                        count = count + 1
            count = 1

    if terms>7:
        count = 1
        for a in range(0,terms):
            for b in range(0,terms):
                for c in range(0,terms):
                    for d in range(0,terms):
                        for e in range(0,terms):
                            for f in range(0,terms):
                                for g in range(0,terms):
                                    for h in range(0,terms):
                                        if b==a and c==a==0 and d==a==0 and d==c==0 and d>c and e==a==0 and e==c==0 and e==d==0 and e>d and f==a==0 and f==c==0 and f==d==0 and f==e==0 and f>e and g==a==0 and g==c==0 and g==d==0 and g==e==0 and g==f==0 and g>f and h==a==0 and h==c==0 and h==d==0 and h==e==0 and h==f==0 and h==g==0 and h>g:
                                            seven[a,count]=[b,c,d,e,f,g,h]
                                            count = count + 1
            count = 1
    
    if terms>8:
        count = 1
        for a in range(0,terms):
            for b in range(0,terms):
                for c in range(0,terms):
                    for d in range(0,terms):
                        for e in range(0,terms):
                            for f in range(0,terms):
                                for g in range(0,terms):
                                    for h in range(0,terms):
                                        for i in range(0,terms):
                                            if b==a and c==a==0 and d==a==0 and d==c==0 and d>c and e==a==0 and e==c==0 and e==d==0 and e>d and f==a==0 and f==c==0 and f==d==0 and f==e==0 and f>e and g==a==0 and g==c==0 and g==d==0 and g==e==0 and g==f==0 and g>f and h==a==0 and h==c==0 and h==d==0 and h==e==0 and h==f==0 and h==g==0 and h>g and i==a==0 and i==c==0 and i==d==0 and i==e==0 and i==f==0 and i==g==0 and i==h==0 and i>h:
                                                eight[a,count]=[b,c,d,e,f,g,h,i]
                                                count = count + 1
            count = 1
    
    if terms>9:   
        nine[1,1] = [1,2,3,4,5,6,7,8,9];    nine[2,1] = [2,1,3,4,5,6,7,8,9];    nine[3,1] = [3,1,2,4,5,6,7,8,9];    nine[4,1] = [4,1,2,3,5,6,7,8,9];    nine[5,1] = [5,1,2,3,4,6,7,8,9];    nine[6,1] = [6,1,2,3,4,5,7,8,9];    nine[7,1] = [7,1,2,3,4,5,6,8,9];    nine[8,1] = [8,1,2,3,4,5,6,7,9];    nine[9,1] = [9,1,2,3,4,5,6,7,8];    nine[10,1] = [10,1,2,3,4,5,6,7,8];   nine[11,1] = [11,1,2,3,4,5,6,7,8];
        nine[1,2] = [1,2,3,4,5,6,7,8,10];   nine[2,2] = [2,1,3,4,5,6,7,8,10];   nine[3,2] = [3,1,2,4,5,6,7,8,10];   nine[4,2] = [4,1,2,3,5,6,7,8,10];   nine[5,2] = [5,1,2,3,4,6,7,8,10];   nine[6,2] = [6,1,2,3,4,5,7,8,10];   nine[7,2] = [7,1,2,3,4,5,6,8,10];   nine[8,2] = [8,1,2,3,4,5,6,7,10];   nine[9,2]= [9,1,2,3,4,5,6,7,10];    nine[10,2] = [10,1,2,3,4,5,6,7,9];   nine[11,2] = [11,1,2,3,4,5,6,7,9];
        nine[1,3] = [1,2,3,4,5,6,7,8,11];   nine[2,3] = [2,1,3,4,5,6,7,8,11];   nine[3,3] = [3,1,2,4,5,6,7,8,11];   nine[4,3] = [4,1,2,3,5,6,7,8,11];   nine[5,3] = [5,1,2,3,4,6,7,8,11];   nine[6,3] = [6,1,2,3,4,5,7,8,11];   nine[7,3] = [7,1,2,3,4,5,6,8,11];   nine[8,3] = [8,1,2,3,4,5,6,7,11];   nine[9,3] = [9,1,2,3,4,5,6,7,11];   nine[10,3] = [10,1,2,3,4,5,6,7,11];  nine[11,3] = [11,1,2,3,4,5,6,7,10];
        nine[1,4] = [1,2,3,4,5,6,7,9,10];   nine[2,4] = [2,1,3,4,5,6,7,9,10];   nine[3,4] = [3,1,2,4,5,6,7,9,10];   nine[4,4] = [4,1,2,3,5,6,7,9,10];   nine[5,4] = [5,1,2,3,4,6,7,9,10];   nine[6,4] = [6,1,2,3,4,5,7,9,10];   nine[7,4] = [7,1,2,3,4,5,6,9,10];   nine[8,4] = [8,1,2,3,4,5,6,9,10];   nine[9,4] = [9,1,2,3,4,5,6,8,10];   nine[10,4] = [10,1,2,3,4,5,6,8,9];   nine[11,4] = [11,1,2,3,4,5,6,8,9];
        nine[1,5] = [1,2,3,4,5,6,7,9,11];   nine[2,5] = [2,1,3,4,5,6,7,9,11];   nine[3,5] = [3,1,2,4,5,6,7,9,11];   nine[4,5] = [4,1,2,3,5,6,7,9,11];   nine[5,5] = [5,1,2,3,4,6,7,9,11];   nine[6,5] = [6,1,2,3,4,5,7,9,11];   nine[7,5] = [7,1,2,3,4,5,6,9,11];   nine[8,5] = [8,1,2,3,4,5,6,9,11];   nine[9,5] = [9,1,2,3,4,5,6,8,11];   nine[10,5] = [10,1,2,3,4,5,6,8,11];  nine[11,5] = [11,1,2,3,4,5,6,8,10];
        nine[1,6] = [1,2,3,4,5,6,7,10,11];  nine[2,6] = [2,1,3,4,5,6,7,10,11];  nine[3,6] = [3,1,2,4,5,6,7,10,11];  nine[4,6] = [4,1,2,3,5,6,7,10,11];  nine[5,6] = [5,1,2,3,4,6,7,10,11];  nine[6,6] = [6,1,2,3,4,5,7,10,11];  nine[7,6] = [7,1,2,3,4,5,6,10,11];  nine[8,6] = [8,1,2,3,4,5,6,10,11];  nine[9,6] = [9,1,2,3,4,5,6,10,11];  nine[10,6] = [10,1,2,3,4,5,6,9,11];  nine[11,6] = [11,1,2,3,4,5,6,9,10];
        nine[1,7] = [1,2,3,4,5,6,8,9,10];   nine[2,7] = [2,1,3,4,5,6,8,9,10];   nine[3,7] = [3,1,2,4,5,6,8,9,10];   nine[4,7] = [4,1,2,3,5,6,8,9,10];   nine[5,7] = [5,1,2,3,4,6,8,9,10];   nine[6,7] = [6,1,2,3,4,5,8,9,10];   nine[7,7] = [7,1,2,3,4,5,8,9,10];   nine[8,7] = [8,1,2,3,4,5,7,9,10];   nine[9,7] = [9,1,2,3,4,5,7,8,10];   nine[10,7] = [10,1,2,3,4,5,7,8,9];   nine[11,7] = [11,1,2,3,4,5,7,8,9];
        nine[1,8] = [1,2,3,4,5,6,8,9,11];   nine[2,8] = [2,1,3,4,5,6,8,9,11];   nine[3,8] = [3,1,2,4,5,6,8,9,11];   nine[4,8] = [4,1,2,3,5,6,8,9,11];   nine[5,8] = [5,1,2,3,4,6,8,9,11];   nine[6,8] = [6,1,2,3,4,5,8,9,11];   nine[7,8] = [7,1,2,3,4,5,8,9,11];   nine[8,8] = [8,1,2,3,4,5,7,9,11];   nine[9,8] = [9,1,2,3,4,5,7,8,11];   nine[10,8] = [10,1,2,3,4,5,7,8,11];  nine[11,8] = [11,1,2,3,4,5,7,8,10];   
        nine[1,9] = [1,2,3,4,5,6,8,10,11];  nine[2,9] = [2,1,3,4,5,6,8,10,11];  nine[3,9] = [3,1,2,4,5,6,8,10,11];  nine[4,9] = [4,1,2,3,5,6,8,10,11];  nine[5,9] = [5,1,2,3,4,6,8,10,11];  nine[6,9] = [6,1,2,3,4,5,8,10,11];  nine[7,9] = [7,1,2,3,4,5,8,10,11];  nine[8,9] = [8,1,2,3,4,5,7,10,11];  nine[9,9] = [9,1,2,3,4,5,7,10,11];  nine[10,9] = [10,1,2,3,4,5,7,9,11];  nine[11,9] = [11,1,2,3,4,5,7,9,10];
        nine[1,10] = [1,2,3,4,5,6,9,10,11]; nine[2,10] = [2,1,3,4,5,6,9,10,11]; nine[3,10] = [3,1,2,4,5,6,9,10,11]; nine[4,10] = [4,1,2,3,5,6,9,10,11]; nine[5,10] = [5,1,2,3,4,6,9,10,11]; nine[6,10] = [6,1,2,3,4,5,9,10,11]; nine[7,10] = [7,1,2,3,4,5,9,10,11]; nine[8,10] = [8,1,2,3,4,5,9,10,11]; nine[9,10] = [9,1,2,3,4,5,8,10,11]; nine[10,10] = [10,1,2,3,4,5,8,9,11]; nine[11,10] = [11,1,2,3,4,5,8,9,10];
        nine[1,11] = [1,2,3,4,5,7,8,9,10];  nine[2,11] = [2,1,3,4,5,7,8,9,10];  nine[3,11] = [3,1,2,4,5,7,8,9,10];  nine[4,11] = [4,1,2,3,5,7,8,9,10];  nine[5,11] = [5,1,2,3,4,7,8,9,10];  nine[6,11] = [6,1,2,3,4,7,8,9,10];  nine[7,11] = [7,1,2,3,4,6,8,9,10];  nine[8,11] = [8,1,2,3,4,6,7,9,10];  nine[9,11] = [9,1,2,3,4,6,7,8,10];  nine[10,11] = [10,1,2,3,4,6,7,8,9];  nine[11,11] = [11,1,2,3,4,6,7,8,9];  
        nine[1,12] = [1,2,3,4,5,7,8,9,11];  nine[2,12] = [2,1,3,4,5,7,8,9,11];  nine[3,12] = [3,1,2,4,5,7,8,9,11];  nine[4,12] = [4,1,2,3,5,7,8,9,11];  nine[5,12] = [5,1,2,3,4,7,8,9,11];  nine[6,12] = [6,1,2,3,4,7,8,9,11];  nine[7,12] = [7,1,2,3,4,6,8,9,11];  nine[8,12] = [8,1,2,3,4,6,7,9,11];  nine[9,12] = [9,1,2,3,4,6,7,8,11];  nine[10,12] = [10,1,2,3,4,6,7,9,11]; nine[11,12] = [11,1,2,3,4,6,7,9,10];
        nine[1,13] = [1,2,3,4,5,7,8,10,11]; nine[2,13] = [2,1,3,4,5,7,8,10,11]; nine[3,13] = [3,1,2,4,5,7,8,10,11]; nine[4,13] = [4,1,2,3,5,7,8,10,11]; nine[5,13] = [5,1,2,3,4,7,8,10,11]; nine[6,13] = [6,1,2,3,4,7,8,10,11]; nine[7,13] = [7,1,2,3,4,6,8,10,11]; nine[8,13] = [8,1,2,3,4,6,7,10,11]; nine[9,13] = [9,1,2,3,4,6,7,10,11]; nine[10,13] = [10,1,2,3,4,6,7,8,11]; nine[11,13] = [11,1,2,3,4,6,7,8,10];
        nine[1,14] = [1,2,3,4,5,7,9,10,11]; nine[2,14] = [2,1,3,4,5,7,9,10,11]; nine[3,14] = [3,1,2,4,5,7,9,10,11]; nine[4,14] = [4,1,2,3,5,7,9,10,11]; nine[5,14] = [5,1,2,3,4,7,9,10,11]; nine[6,14] = [6,1,2,3,4,7,9,10,11]; nine[7,14] = [7,1,2,3,4,6,9,10,11]; nine[8,14] = [8,1,2,3,4,6,9,10,11]; nine[9,14] = [9,1,2,3,4,6,8,10,11]; nine[10,14] = [10,1,2,3,4,6,8,9,11]; nine[11,14] = [11,1,2,3,4,6,7,9,10];
        nine[1,15] = [1,2,3,4,5,8,9,10,11]; nine[2,15] = [2,1,3,4,5,8,9,10,11]; nine[3,15] = [3,1,2,4,5,8,9,10,11]; nine[4,15] = [4,1,2,3,5,8,9,10,11]; nine[5,15] = [5,1,2,3,4,8,9,10,11]; nine[6,15] = [6,1,2,3,4,8,9,10,11]; nine[7,15] = [7,1,2,3,4,8,9,10,11]; nine[8,15] = [8,1,2,3,4,7,9,10,11]; nine[9,15] = [9,1,2,3,4,7,8,10,11]; nine[10,15] = [10,1,2,3,4,7,8,9,11]; nine[11,15] = [11,1,2,3,4,7,8,9,10];
        nine[1,16] = [1,2,3,4,6,7,8,9,10];  nine[2,16] = [2,1,3,4,6,7,8,9,10];  nine[3,16] = [3,1,2,4,6,7,8,9,10];  nine[4,16] = [4,1,2,3,6,7,8,9,10];  nine[5,16] = [5,1,2,3,6,7,8,9,10];  nine[6,16] = [6,1,2,3,5,7,8,9,10];  nine[7,16] = [7,1,2,3,5,6,8,9,10];  nine[8,16] = [8,1,2,3,5,6,7,9,10];  nine[9,16] = [9,1,2,3,5,6,7,8,10];  nine[10,16] = [10,1,2,3,5,6,7,8,9];  nine[11,16] = [11,1,2,3,5,6,7,8,9];
        nine[1,17] = [1,2,3,4,6,7,8,9,11];  nine[2,17] = [2,1,3,4,6,7,8,9,11];  nine[3,17] = [3,1,2,4,6,7,8,9,11];  nine[4,17] = [4,1,2,3,6,7,8,9,11];  nine[5,17] = [5,1,2,3,6,7,8,9,11];  nine[6,17] = [6,1,2,3,5,7,8,9,11];  nine[7,17] = [7,1,2,3,5,6,8,9,11];  nine[8,17] = [8,1,2,3,5,6,7,9,11];  nine[9,17] = [9,1,2,3,5,6,7,8,11];  nine[10,17] = [10,1,2,3,5,6,7,8,11]; nine[11,17] = [11,1,2,3,5,6,7,8,10];
        nine[1,18] = [1,2,3,4,6,7,8,10,11]; nine[2,18] = [2,1,3,4,6,7,8,10,11]; nine[3,18] = [3,1,2,4,6,7,8,10,11]; nine[4,18] = [4,1,2,3,6,7,8,10,11]; nine[5,18] = [5,1,2,3,6,7,8,10,11]; nine[6,18] = [6,1,2,3,5,7,8,10,11]; nine[7,18] = [7,1,2,3,5,6,8,10,11]; nine[8,18] = [8,1,2,3,5,6,7,10,11]; nine[9,18] = [9,1,2,3,5,6,7,10,11]; nine[10,18] = [10,1,2,3,5,6,7,9,11]; nine[11,18] = [11,1,2,3,5,6,7,9,10];
        nine[1,19] = [1,2,3,4,6,7,9,10,11]; nine[2,19] = [2,1,2,4,6,7,9,10,11]; nine[3,19] = [3,1,2,4,6,7,9,10,11]; nine[4,19] = [4,1,2,3,6,7,9,10,11]; nine[5,19] = [5,1,2,3,6,7,9,10,11]; nine[6,19] = [6,1,2,3,5,7,9,10,11]; nine[7,19] = [7,1,2,3,5,6,9,10,11]; nine[8,19] = [8,1,2,3,5,6,9,10,11]; nine[9,19] = [9,1,2,3,5,6,8,10,11]; nine[10,19] = [10,1,2,3,5,6,8,9,11]; nine[11,19] = [11,1,2,3,5,6,8,9,10];
        nine[1,20] = [1,2,3,4,6,8,9,10,11]; nine[2,20] = [2,1,3,4,6,8,9,10,11]; nine[3,20] = [3,1,2,4,6,8,9,10,11]; nine[4,20] = [4,1,2,3,6,8,9,10,11]; nine[5,20] = [5,1,2,3,6,8,9,10,11]; nine[6,20] = [6,1,2,3,5,8,9,10,11]; nine[7,20] = [7,1,2,3,5,8,9,10,11]; nine[8,20] = [8,1,2,3,5,7,9,10,11]; nine[9,20] = [9,1,2,3,5,7,8,10,11]; nine[10,20] = [10,1,2,3,5,7,8,9,11]; nine[11,20] = [11,1,2,3,5,7,8,9,10];
        nine[1,21] = [1,2,3,4,7,8,9,10,11]; nine[2,21] = [2,1,3,4,7,8,9,10,11]; nine[3,21] = [3,1,2,4,7,8,9,10,11]; nine[4,21] = [4,1,2,3,7,8,9,10,11]; nine[5,21] = [5,1,2,3,7,8,9,10,11]; nine[6,21] = [6,1,2,3,7,8,9,10,11]; nine[7,21] = [7,1,2,3,6,8,9,10,11]; nine[8,21] = [8,1,2,3,6,7,9,10,11]; nine[9,21] = [9,1,2,3,6,7,8,10,11]; nine[10,21] = [10,1,2,3,6,7,8,9,11]; nine[11,21] = [11,1,2,3,6,7,8,9,10];
        nine[1,22] = [1,2,3,5,6,7,8,9,10];  nine[2,22] = [2,1,3,5,6,7,8,9,10];  nine[3,22] = [3,1,2,5,6,7,8,9,10];  nine[4,22] = [4,1,2,5,6,7,8,9,10];  nine[5,22] = [5,1,2,4,6,7,8,9,10];  nine[6,22] = [6,1,2,4,5,7,8,9,10];  nine[7,22] = [7,1,2,4,5,6,8,9,10];  nine[8,22] = [8,1,2,4,5,6,7,9,10];  nine[9,22] = [9,1,2,4,5,6,7,8,10];  nine[10,22] = [10,1,2,4,5,6,7,8,9];  nine[11,22] = [11,1,2,4,5,6,7,8,9];
        nine[1,23] = [1,2,3,5,6,7,8,9,11];  nine[2,23] = [2,1,3,5,6,7,8,9,11];  nine[3,23] = [3,1,2,5,6,7,8,9,11];  nine[4,23] = [4,1,2,5,6,7,8,9,11];  nine[5,23] = [5,1,2,4,6,7,8,9,11];  nine[6,23] = [6,1,2,4,5,7,8,9,11];  nine[7,23] = [7,1,2,4,5,6,8,9,11];  nine[8,23] = [8,1,2,4,5,6,7,9,11];  nine[9,23] = [9,1,2,4,5,6,7,8,11];  nine[10,23] = [10,1,2,4,5,6,7,8,11]; nine[11,23] = [11,1,2,4,5,6,7,8,10];
        nine[1,24] = [1,2,3,5,6,7,8,10,11]; nine[2,24] = [2,1,3,5,6,7,8,10,11]; nine[3,24] = [3,1,2,5,6,7,8,10,11]; nine[4,24] = [4,1,2,5,6,7,8,10,11]; nine[5,24] = [5,1,2,4,6,7,8,10,11]; nine[6,24] = [6,1,2,4,5,7,8,10,11]; nine[7,24] = [7,1,2,4,5,6,8,10,11]; nine[8,24] = [8,1,2,4,5,6,7,10,11]; nine[9,24] = [9,1,2,4,5,6,7,10,11]; nine[10,24] = [10,1,2,4,5,6,7,9,11]; nine[11,24] = [11,1,2,4,5,6,7,9,10];
        nine[1,25] = [1,2,3,5,6,7,9,10,11]; nine[2,25] = [2,1,3,5,6,7,9,10,11]; nine[3,25] = [3,1,2,5,6,7,9,10,11]; nine[4,25] = [4,1,2,5,6,7,9,10,11]; nine[5,25] = [5,1,2,4,6,7,9,10,11]; nine[6,25] = [6,1,2,4,5,7,9,10,11]; nine[7,25] = [7,1,2,4,5,6,9,10,11]; nine[8,25] = [8,1,2,4,5,6,9,10,11]; nine[9,25] = [9,1,2,4,5,6,8,10,11]; nine[10,25] = [10,1,2,4,5,6,8,9,11]; nine[11,25] = [11,1,2,4,5,6,8,9,10];
        nine[1,26] = [1,2,3,5,6,8,9,10,11]; nine[2,26] = [2,1,3,5,6,8,9,10,11]; nine[3,26] = [3,1,2,5,6,8,9,10,11]; nine[4,26] = [4,1,2,5,6,8,9,10,11]; nine[5,26] = [5,1,2,4,6,8,9,10,11]; nine[6,26] = [6,1,2,4,5,8,9,10,11]; nine[7,26] = [7,1,2,4,5,8,9,10,11]; nine[8,26] = [8,1,2,4,5,7,9,10,11]; nine[9,26] = [9,1,2,4,5,7,8,10,11]; nine[10,26] = [10,1,2,4,5,7,8,9,11]; nine[11,26] = [11,1,2,4,5,7,8,9,10];
        nine[1,27] = [1,2,3,5,7,8,9,10,11]; nine[2,27] = [2,1,3,5,7,8,9,10,11]; nine[3,27] = [3,1,2,5,7,8,9,10,11]; nine[4,27] = [4,1,2,5,7,8,9,10,11]; nine[5,27] = [5,1,2,3,7,8,9,10,11]; nine[6,27] = [6,1,2,4,7,8,9,10,11]; nine[7,27] = [7,1,2,4,6,8,9,10,11]; nine[8,27] = [8,1,2,4,6,7,9,10,11]; nine[9,27] = [9,1,2,4,6,7,8,10,11]; nine[10,27] = [10,1,2,4,6,7,8,9,11]; nine[11,27] = [11,1,2,4,5,7,8,9,10];
        nine[1,28] = [1,2,3,6,7,8,9,10,11]; nine[2,28] = [2,1,3,6,7,8,9,10,11]; nine[3,28] = [3,1,2,6,7,8,9,10,11]; nine[4,28] = [4,1,2,5,7,8,9,10,11]; nine[5,28] = [5,1,2,3,7,8,9,10,11]; nine[6,28] = [6,1,2,3,7,8,9,10,11]; nine[7,28] = [7,1,2,4,6,8,9,10,11]; nine[8,28] = [8,1,2,4,6,7,9,10,11]; nine[9,28] = [9,1,2,4,6,7,8,10,11]; nine[10,28] = [10,1,2,4,6,7,8,9,11]; nine[11,28] = [11,1,2,4,6,7,8,9,10];
        nine[1,29] = [1,2,4,5,6,7,8,9,10];  nine[2,29] = [2,1,4,5,6,7,8,9,10];  nine[3,29] = [3,1,4,5,6,7,8,9,10];  nine[4,29] = [4,1,3,5,6,7,8,9,10];  nine[5,29] = [5,1,3,4,6,7,8,9,10];  nine[6,29] = [6,1,3,4,5,7,8,9,10];  nine[7,29] = [7,1,3,4,5,6,8,9,10];  nine[8,29] = [8,1,3,4,5,6,7,9,10];  nine[9,29] = [9,1,3,4,5,6,7,8,10];  nine[10,29] = [10,1,3,4,5,6,7,8,9];  nine[11,29] = [11,1,3,4,5,6,7,8,9];
        nine[1,30] = [1,2,4,5,6,7,8,9,11];  nine[2,30] = [2,1,4,5,6,7,8,9,11];  nine[3,30] = [3,1,4,5,6,7,8,9,11];  nine[4,30] = [4,1,3,5,6,7,8,9,11];  nine[5,30] = [5,1,3,4,6,7,8,9,11];  nine[6,30] = [6,1,3,4,5,7,8,9,11];  nine[7,30] = [7,1,3,4,5,6,8,9,11];  nine[8,30] = [8,1,3,4,5,6,7,9,11];  nine[9,30] = [9,1,3,4,5,6,7,8,11];  nine[10,30] = [10,1,3,4,5,6,7,8,11]; nine[11,30] = [11,1,3,4,5,6,7,8,10];
        nine[1,31] = [1,2,4,5,6,7,8,10,11]; nine[2,31] = [2,1,4,5,6,7,8,10,11]; nine[3,31] = [3,1,4,5,6,7,8,10,11]; nine[4,31] = [4,1,3,5,6,7,8,10,11]; nine[5,31] = [5,1,3,4,6,7,8,10,11]; nine[6,31] = [6,1,3,4,5,7,8,10,11]; nine[7,31] = [7,1,3,4,5,6,8,10,11]; nine[8,31] = [8,1,3,4,5,6,7,10,11]; nine[9,31] = [9,1,3,4,5,6,7,10,11]; nine[10,31] = [10,1,3,4,5,6,7,9,11]; nine[11,31] = [11,1,3,4,5,6,7,9,10];
        nine[1,32] = [1,2,4,5,6,7,9,10,11]; nine[2,32] = [2,1,4,5,6,7,9,10,11]; nine[3,32] = [3,1,4,5,6,7,9,10,11]; nine[4,32] = [4,1,3,5,6,7,9,10,11]; nine[5,32] = [5,1,3,4,6,7,9,10,11]; nine[6,32] = [6,1,3,4,5,7,9,10,11]; nine[7,32] = [7,1,3,4,5,6,9,10,11]; nine[8,32] = [8,1,3,4,5,6,9,10,11]; nine[9,32] = [9,1,3,4,5,6,8,10,11]; nine[10,32] = [10,1,3,4,5,6,8,9,11]; nine[11,32] = [11,1,3,4,5,6,8,9,10];
        nine[1,33] = [1,2,4,5,6,8,9,10,11]; nine[2,33] = [2,1,4,5,6,8,9,10,11]; nine[3,33] = [3,1,4,5,6,8,9,10,11]; nine[4,33] = [4,1,3,5,6,8,9,10,11]; nine[5,33] = [5,1,3,4,6,8,9,10,11]; nine[6,33] = [6,1,3,4,5,8,9,10,11]; nine[7,33] = [7,1,3,4,5,8,9,10,11]; nine[8,33] = [8,1,3,4,5,7,9,10,11]; nine[9,33] = [9,1,3,4,5,7,8,10,11]; nine[10,33] = [10,1,3,4,5,7,8,9,11]; nine[11,33] = [11,1,3,4,5,7,8,9,10];
        nine[1,34] = [1,2,4,5,7,8,9,10,11]; nine[2,34] = [2,1,4,5,7,8,9,10,11]; nine[3,34] = [3,1,4,5,7,8,9,10,11]; nine[4,34] = [4,1,3,5,7,8,9,10,11]; nine[5,34] = [5,1,3,4,7,8,9,10,11]; nine[6,34] = [6,1,3,4,7,8,9,10,11]; nine[7,34] = [7,1,3,4,6,8,9,10,11]; nine[8,34] = [8,1,3,4,6,7,9,10,11]; nine[9,34] = [9,1,3,4,6,7,8,10,11]; nine[10,34] = [10,1,3,4,6,7,8,9,11]; nine[11,34] = [11,1,3,4,6,7,8,9,10];
        nine[1,35] = [1,2,4,6,7,8,9,10,11]; nine[2,35] = [2,1,4,6,7,8,9,10,11]; nine[3,35] = [3,1,4,6,7,8,9,10,11]; nine[4,35] = [4,1,3,6,7,8,9,10,11]; nine[5,35] = [5,1,3,6,7,8,9,10,11]; nine[6,35] = [6,1,3,5,7,8,9,10,11]; nine[7,35] = [7,1,3,5,6,8,9,10,11]; nine[8,35] = [8,1,3,5,6,7,9,10,11]; nine[9,35] = [9,1,3,5,6,7,8,10,11]; nine[10,35] = [10,1,3,5,6,7,8,9,11]; nine[11,35] = [11,1,3,5,6,7,8,9,10];
        nine[1,36] = [1,2,5,6,7,8,9,10,11]; nine[2,36] = [2,1,5,6,7,8,9,10,11]; nine[3,36] = [3,1,5,6,7,8,9,10,11]; nine[4,36] = [4,1,5,6,7,8,9,10,11]; nine[5,36] = [5,1,4,6,7,8,9,10,11]; nine[6,36] = [6,1,4,5,7,8,9,10,11]; nine[7,36] = [7,1,4,5,6,8,9,10,11]; nine[8,36] = [8,1,4,5,6,7,9,10,11]; nine[9,36] = [9,1,4,5,6,7,8,10,11]; nine[10,36] = [10,1,4,5,6,7,8,9,11]; nine[11,36] = [11,1,4,5,6,7,8,9,10];
        nine[1,37] = [1,3,4,5,6,7,8,9,10];  nine[2,37] = [2,3,4,5,6,7,8,9,10];  nine[3,37] = [3,2,4,5,6,7,8,9,10];  nine[4,37] = [4,2,3,5,6,7,8,9,10];  nine[5,37] = [5,2,3,4,6,7,8,9,10];  nine[6,37] = [6,2,3,4,5,7,8,9,10];  nine[7,37] = [7,2,3,4,5,6,8,9,10];  nine[8,37] = [8,2,3,4,5,6,7,9,10];  nine[9,37] = [9,2,3,4,5,6,7,8,10];  nine[10,37] = [10,2,3,4,5,6,7,8,9];  nine[11,37] = [11,2,3,4,5,6,7,8,9];
        nine[1,38] = [1,3,4,5,6,7,8,9,11];  nine[2,38] = [2,3,4,5,6,7,8,9,11];  nine[3,38] = [3,2,4,5,6,7,8,9,11];  nine[4,38] = [4,2,3,5,6,7,8,9,11];  nine[5,38] = [5,2,3,4,6,7,8,9,11];  nine[6,38] = [6,2,3,4,5,7,8,9,11];  nine[7,38] = [7,2,3,4,5,6,8,9,11];  nine[8,38] = [8,2,3,4,5,6,7,9,11];  nine[9,38] = [9,2,3,4,5,6,7,8,11];  nine[10,38] = [10,2,3,4,5,6,7,8,11]; nine[11,38] = [11,2,3,4,5,6,7,8,10];
        nine[1,39] = [1,3,4,5,6,7,8,10,11]; nine[2,39] = [2,3,4,5,6,7,8,10,11]; nine[3,39] = [3,2,4,5,6,7,8,10,11]; nine[4,39] = [4,2,3,5,6,7,8,10,11]; nine[5,39] = [5,2,3,4,6,7,8,10,11]; nine[6,39] = [6,2,3,4,5,7,8,10,11]; nine[7,39] = [7,2,3,4,5,6,8,10,11]; nine[8,39] = [8,2,3,4,5,6,7,10,11]; nine[9,39] = [9,2,3,4,5,6,7,10,11]; nine[10,39] = [10,2,3,4,5,6,7,9,11]; nine[11,39] = [11,2,3,4,5,6,7,9,10];
        nine[1,40] = [1,3,4,5,6,7,9,10,11]; nine[2,40] = [2,3,4,5,6,7,9,10,11]; nine[3,40] = [3,2,4,5,6,7,9,10,11]; nine[4,40] = [4,2,3,5,6,7,9,10,11]; nine[5,40] = [5,2,3,4,6,7,9,10,11]; nine[6,40] = [6,2,3,4,5,7,9,10,11]; nine[7,40] = [7,2,3,4,5,6,9,10,11]; nine[8,40] = [8,2,3,4,5,6,9,10,11]; nine[9,40] = [9,2,3,4,5,6,8,10,11]; nine[10,40] = [10,2,3,4,5,6,8,9,11]; nine[11,40] = [11,2,3,4,5,6,8,9,10];
        nine[1,41] = [1,3,4,5,6,8,9,10,11]; nine[2,41] = [2,3,4,5,6,8,9,10,11]; nine[3,41] = [3,2,4,5,6,8,9,10,11]; nine[4,41] = [4,2,3,5,6,8,9,10,11]; nine[5,41] = [5,2,3,4,6,8,9,10,11]; nine[6,41] = [6,2,3,4,5,8,9,10,11]; nine[7,41] = [7,2,3,4,5,8,9,10,11]; nine[8,41] = [8,2,3,4,5,7,9,10,11]; nine[9,41] = [9,2,3,4,5,7,8,10,11]; nine[10,41] = [10,2,3,4,5,7,8,9,11]; nine[11,41] = [11,2,3,4,5,7,8,9,10];
        nine[1,42] = [1,3,4,5,7,8,9,10,11]; nine[2,42] = [2,3,4,5,7,8,9,10,11]; nine[3,42] = [3,2,4,5,7,8,9,10,11]; nine[4,42] = [4,2,3,5,7,8,9,10,11]; nine[5,42] = [5,2,3,4,7,8,9,10,11]; nine[6,42] = [6,2,3,4,7,8,9,10,11]; nine[7,42] = [7,2,3,4,7,8,9,10,11]; nine[8,42] = [8,2,3,4,6,7,9,10,11]; nine[9,42] = [9,2,3,4,6,7,8,10,11]; nine[10,42] = [10,2,3,4,6,7,8,9,11]; nine[11,42] = [11,2,3,4,6,7,8,9,10];
        nine[1,43] = [1,3,4,6,7,8,9,10,11]; nine[2,43] = [2,3,4,6,7,8,9,10,11]; nine[3,43] = [3,2,4,6,7,8,9,10,11]; nine[4,43] = [4,2,3,6,7,8,9,10,11]; nine[5,43] = [5,2,3,6,7,8,9,10,11]; nine[6,43] = [6,2,3,5,7,8,9,10,11]; nine[7,43] = [7,2,3,5,6,8,9,10,11]; nine[8,43] = [8,2,3,5,6,7,9,10,11]; nine[9,43] = [9,2,3,5,6,7,8,10,11]; nine[10,43] = [10,2,3,5,6,7,8,9,11]; nine[11,43] = [11,2,3,5,6,7,8,9,10];
        nine[1,44] = [1,3,5,6,7,8,9,10,11]; nine[2,44] = [2,3,5,6,7,8,9,10,11]; nine[3,44] = [3,2,5,6,7,8,9,10,11]; nine[4,44] = [4,2,5,6,7,8,9,10,11]; nine[5,44] = [5,2,4,6,7,8,9,10,11]; nine[6,44] = [6,2,4,5,7,8,9,10,11]; nine[7,44] = [7,2,4,5,6,8,9,10,11]; nine[8,44] = [8,2,4,5,6,7,9,10,11]; nine[9,44] = [9,2,4,5,6,7,8,10,11]; nine[10,44] = [10,2,4,5,6,7,8,9,11]; nine[11,44] = [11,2,4,5,6,7,8,9,10];
        nine[1,45] = [1,4,5,6,7,8,9,10,11]; nine[2,45] = [2,4,5,6,7,8,9,10,11]; nine[3,45] = [3,4,5,6,7,8,9,10,11]; nine[4,45] = [4,3,5,6,7,8,9,10,11]; nine[5,45] = [5,3,4,6,7,8,9,10,11]; nine[6,45] = [6,3,4,5,7,8,9,10,11]; nine[7,45] = [7,3,4,5,6,8,9,10,11]; nine[8,45] = [8,3,4,5,6,7,9,10,11]; nine[9,45] = [9,3,4,5,6,7,8,10,11]; nine[10,45] = [10,3,4,5,6,7,8,9,11]; nine[11,45] = [11,3,4,5,6,7,8,9,10];
    
    if terms>10:
    
        ten[1,1] = [1,2,3,4,5,6,7,8,9,10];    ten[2,1] = [2,1,3,4,5,6,7,8,9,10];    ten[3,1] = [3,1,2,4,5,6,7,8,9,10];    ten[4,1] = [4,1,2,3,5,6,7,8,9,10];    ten[5,1] = [5,1,2,3,4,6,7,8,9,10];    ten[6,1] = [6,1,2,3,4,5,7,8,9,10];   ten[7,1] = [7,1,2,3,4,5,6,8,9,10];   ten[8,1] = [8,1,2,3,4,5,6,7,9,10];   ten[9,1] = [9,1,2,3,4,5,6,7,8,10];   ten[10,1] = [10,1,2,3,4,5,6,7,8,9];   ten[11,1] = [11,1,2,3,4,5,6,7,8,9];
        ten[1,2] = [1,2,3,4,5,6,7,8,9,11];    ten[2,2] = [2,1,3,4,5,6,7,8,9,11];    ten[3,2] = [3,1,2,4,5,6,7,8,9,11];    ten[4,2] = [4,1,2,3,5,6,7,8,9,11];    ten[5,2] = [5,1,2,3,4,6,7,8,9,11];    ten[6,2] = [6,1,2,3,4,5,7,8,9,11];   ten[7,2] = [7,1,2,3,4,5,6,8,9,11];   ten[8,2] = [8,1,2,3,4,5,6,7,9,11];   ten[9,2] = [9,1,2,3,4,5,6,7,8,11];   ten[10,2] = [10,1,2,3,4,5,6,7,8,11];  ten[11,2] = [11,1,2,3,4,5,6,7,8,10];
        ten[1,3] = [1,2,3,4,5,6,7,8,10,11];   ten[2,3] = [2,1,3,4,5,6,7,8,10,11];   ten[3,3] = [3,1,2,4,5,6,7,8,10,11];   ten[4,3] = [4,1,2,3,5,6,7,8,10,11];   ten[5,3] = [5,1,2,3,4,6,7,8,10,11];   ten[6,3] = [6,1,2,3,4,5,7,8,10,11];  ten[7,3] = [7,1,2,3,4,5,6,8,10,11];  ten[8,3] = [8,1,2,3,4,5,6,7,10,11];  ten[9,3] = [9,1,2,3,4,5,6,7,10,11];  ten[10,3] = [10,1,2,3,4,5,6,7,9,11];  ten[11,3] = [11,1,2,3,4,5,6,7,9,10];
        ten[1,4] = [1,2,3,4,5,6,7,9,10,11];   ten[2,4] = [2,1,3,4,5,6,7,9,10,11];   ten[3,4] = [3,1,2,4,5,6,7,9,10,11];   ten[4,4] = [4,1,2,3,5,6,7,9,10,11];   ten[5,4] = [5,1,2,3,4,6,8,9,10,11];   ten[6,4] = [6,1,2,3,4,5,7,9,10,11];  ten[7,4] = [7,1,2,3,4,5,6,9,10,11];  ten[8,4] = [8,1,2,3,4,5,6,9,10,11];  ten[9,4] = [9,1,2,3,4,5,6,8,10,11];  ten[10,4] = [10,1,2,3,4,5,6,8,9,11];  ten[11,4] = [11,1,2,3,4,5,6,8,9,10];
        ten[1,5] = [1,2,3,4,5,6,8,9,10,11];   ten[2,5] = [2,1,3,4,5,6,8,9,10,11];   ten[3,5] = [3,1,2,4,5,6,8,9,10,11];   ten[4,5] = [4,1,2,3,5,6,8,9,10,11];   ten[5,5] = [5,1,2,3,4,7,8,9,10,11];   ten[6,5] = [6,1,2,3,4,5,8,9,10,11];  ten[7,5] = [7,1,2,3,4,5,8,9,10,11];  ten[8,5] = [8,1,2,3,4,5,7,9,10,11];  ten[9,5] = [9,1,2,3,4,5,7,8,10,11];  ten[10,5] = [10,1,2,3,4,5,7,8,9,11];  ten[11,5] = [11,1,2,3,4,5,7,8,9,10];
        ten[1,6] = [1,2,3,4,5,7,8,9,10,11];   ten[2,6] = [2,1,3,4,5,7,8,9,10,11];   ten[3,6] = [3,1,2,4,5,7,8,9,10,11];   ten[4,6] = [4,1,2,3,5,7,8,9,10,11];   ten[5,6] = [5,1,2,3,4,7,8,9,10,11];   ten[6,6] = [6,1,2,3,5,7,8,9,10,11];  ten[7,6] = [7,1,2,3,4,6,8,9,10,11];  ten[8,6] = [8,1,2,3,4,6,7,9,10,11];  ten[9,6] = [9,1,2,3,4,6,7,8,10,11];  ten[10,6] = [10,1,2,3,4,6,7,8,9,11];  ten[11,6] = [11,1,2,3,4,6,7,8,9,10];
        ten[1,7] = [1,2,3,4,6,7,8,9,10,11];   ten[2,7] = [2,1,3,4,6,7,8,9,10,11];   ten[3,7] = [3,1,2,4,6,7,8,9,10,11];   ten[4,7] = [4,1,2,3,6,7,8,9,10,11];   ten[5,7] = [5,1,2,3,6,7,8,9,10,11];   ten[6,7] = [6,1,2,3,5,7,8,9,10,11];  ten[7,7] = [7,1,2,3,5,6,8,9,10,11];  ten[8,7] = [8,1,2,3,5,6,7,9,10,11];  ten[9,7] = [9,1,2,3,5,6,7,8,10,11];  ten[10,7] = [10,1,2,3,5,6,7,8,9,11];  ten[11,7] = [11,1,2,3,5,6,7,8,9,10];
        ten[1,8] = [1,2,3,5,6,7,8,9,10,11];   ten[2,8] = [2,1,3,5,6,7,8,9,10,11];   ten[3,8] = [3,1,2,5,6,7,8,9,10,11];   ten[4,8] = [4,1,2,5,6,7,8,9,10,11];   ten[5,8] = [5,1,2,4,6,7,8,9,10,11];   ten[6,8] = [6,1,2,4,5,7,8,9,10,11];  ten[7,8] = [7,1,2,4,5,6,8,9,10,11];  ten[8,8] = [8,1,2,4,5,6,7,9,10,11];  ten[9,8] = [9,1,2,4,5,6,7,8,10,11];  ten[10,8] = [10,1,2,4,5,6,7,8,9,11];  ten[11,8] = [11,1,2,4,5,6,7,8,9,10];   
        ten[1,9] = [1,2,4,5,6,7,8,9,10,11];   ten[2,9] = [2,1,4,5,6,7,8,9,10,11];   ten[3,9] = [3,1,4,5,6,7,8,9,10,11];   ten[4,9] = [4,1,3,5,6,7,8,9,10,11];   ten[5,9] = [5,1,3,4,6,7,8,9,10,11];   ten[6,9] = [6,1,3,4,5,7,8,9,10,11];  ten[7,9] = [7,1,3,4,5,6,8,9,10,11];  ten[8,9] = [8,1,3,4,5,6,7,9,10,11];  ten[9,9] = [9,1,3,4,5,6,7,8,10,11];  ten[10,9] = [10,1,3,4,5,6,7,8,9,11];  ten[11,9] = [11,1,3,4,5,6,7,8,9,10];
        ten[1,10] = [1,3,4,5,6,7,8,9,10,11];  ten[2,10] = [2,3,4,5,6,7,8,9,10,11];  ten[3,10] = [3,2,4,5,6,7,8,9,10,11];  ten[4,10] = [4,2,3,5,6,7,8,9,10,11];  ten[5,10] = [5,2,3,4,6,7,8,9,10,11];  ten[6,10] = [6,2,3,4,5,7,8,9,10,11]; ten[7,10] = [7,2,3,4,5,6,8,9,10,11]; ten[8,10] = [8,2,3,4,5,6,7,9,10,11]; ten[9,10] = [9,2,3,4,5,6,7,8,10,11]; ten[10,10] = [10,1,2,3,4,5,7,8,9,11]; ten[11,10] = [11,2,3,4,5,6,7,8,9,10];

    pdiff = 1; prod = 1; temp=0; 

#    for a in range(0,terms):  
#        equ(a,1) = x*(sda1[1,a]-sda0[1,a])/sda0[1,a];   
#  
#    if terms>2:
#        for b in range(0,terms):
#            for c in range(0,len(two)):
#                key = two(b,c)           
#                for d in range(0,2):
#                    prod = prod*sda0[1,key[1](d)]
#                    pdiff = pdiff*(sda1[1,key[1](d)]-sda0[1,key[1](d)])            
#                temp = temp + x*pdiff/prod/2;
#                pdiff = 1;
#                prod = 1;        
#            equ(b,2) = temp;
#            temp = 0;
#    
#    if terms>3:
#        for b in range(0,terms):
#            for c in range(0,len(three)):
#                key = three(b,c)          
#                for d in range(0,3):
#                    prod = prod*A[1,key[1](d)];
#                    pdiff = pdiff*(B[1,key[1](d)]-A[1,key[1](d)]);            
#                temp = temp + x*pdiff/prod/3;
#                pdiff = 1;
#                prod = 1;        
#            equ(b,3) = temp;
#            temp = 0;
#    
#    if terms>4:
#        for b in range(0,terms):
#            for c in range(0,len(four)):
#                key = four(b,c)           
#                for d in range(0,4):
#                    prod = prod*A[1,key[1](d)];
#                    pdiff = pdiff*(B[1,key[1](d)]-A[1,key[1](d)]);            
#                temp = temp + x*pdiff/prod/4;
#                pdiff = 1;
#                prod = 1;        
#            equ(b,4) = temp;
#            temp = 0;
#    
#    if terms>5:
#        for b in range(0,terms):
#            for c in range(0,len(five)):
#                key = five(b,c)            
#                for d in range(0,5):
#                    prod = prod*A[1,key[1](d)];
#                    pdiff = pdiff*(B[1,key[1](d)]-A[1,key[1](d)]);
#                temp = temp + x*pdiff/prod/5;
#                pdiff = 1;
#                prod = 1;
#            equ(b,5) = temp;
#            temp = 0;
#    
#    if terms>6:
#        for b in range(0,terms):
#            for c in range(0,len(six)):
#                key = six(b,c)         
#                for d in range(0,6):
#                    prod = prod*A[1,key[1](d)];
#                    pdiff = pdiff*(B[1,key[1](d)]-A[1,key[1](d)]);
#                temp = temp + x*pdiff/prod/6;
#                pdiff = 1;
#                prod = 1;
#            equ(b,6) = temp;
#            temp = 0;
#    
#    if terms>7:
#        for b in range(0,terms):
#            for c in range(0,len(seven)):
#                key = seven(b,c)            
#                for d in range(0,7):
#                    prod = prod*A[1,key[1](d)];
#                    pdiff = pdiff*(B[1,key[1](d)]-A[1,key[1](d)]);
#                temp = temp + x*pdiff/prod/7;
#                pdiff = 1;
#                prod = 1;
#            equ(b,7) = temp;
#            temp = 0;
#
#    if terms>8:
#        for b in range(0,terms):
#            for c in range(0,len(eight)):
#                key = eight(b,c)           
#                for d in range(0,8):
#                    prod = prod*A[1,key[1](d)];
#                    pdiff = pdiff*(B[1,key[1](d)]-A[1,key[1](d)]);
#                temp = temp + x*pdiff/prod/8;
#                pdiff = 1;
#                prod = 1;
#            equ(b,8) = temp;
#            temp = 0;
#    
#    if terms>9:
#        for b in range(0,terms):
#            for c in range(0,len(nine)):
#                key = nine(b,c)            
#                for d in range(0,9):
#                    prod = prod*A[1,key[1](d)];
#                    pdiff = pdiff*(B[1,key[1](d)]-A[1,key[1](d)]);
#                temp = temp + x*pdiff/prod/9;
#                pdiff = 1;
#                prod = 1;
#            equ(b,9) = temp;
#            temp = 0;
#    
#    if terms>10:
#        for b in range(0,terms):
#            for c in range(0,len(ten)):
#                key = ten(b,c)           
#                for d in range(0,10):
#                    prod = prod*A[1,key[1](d)];
#                    pdiff = pdiff*(B[1,key[1](d)]-A[1,key[1](d)]);
#                temp = temp + x*pdiff/prod/10;
#                pdiff = 1;
#                prod = 1;
#            equ(b,10) = temp;
#            temp = 0;
#
#    for a in range(0,terms):
#        for b in range(0,terms):
#            lasttemp = lasttemp*(B[1,b]-A[1,b]);
#            end
#            equ(a,terms) = 1/terms*lasttemp;
#            lasttemp = 1;
#    
#    for a in range(0,terms):
#        for b in range(0,terms):
#            resulttemp = equ(a,b)+resulttemp;
#        result(1,a)=resulttemp;
#        resulttemp=0;

    return result

